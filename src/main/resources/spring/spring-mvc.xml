<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
">
    <!--扫描web层的注解类,以下注解是为了扫描这个注解：@Controller-->
    <context:component-scan base-package="com.qf.manager.web"/>
    <!--@RequestMapping @ResponseBody jackson转换成JSON-->
    <mvc:annotation-driven/>

    <!-- 放在InternalResourceViewResolver的前面，优先找freemarker -->
    <!-- 配置freeMarker视图解析器 -->
    <bean id="viewResolverFtl" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <property name="contentType" value="text/html; charset=utf-8"/>
        <property name="cache" value="true" />
        <property name="suffix" value=".ftl" />
        <!--这个必须设置,意思:让解析中在spring mvc前面先执行 (视图解析的顺序)-->
        <property name="order" value="0"/>
    </bean>
    <!-- 配置freeMarker的模板路径 -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/jsp/template/"/>
        <property name="defaultEncoding" value="utf-8"/>
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape" />
            </map>
        </property>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">3600</prop>
            </props>
        </property>
    </bean>
    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>

    <!--配置Spring MVC视图解析器 Controller  hello(){return "index"}  转发：/WEB-INF/jsp/index.jsp -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
        <property name="order" value="1"/>
    </bean>
    <!--在视图解析器中有一个<property name="order" value="orderValue"/>的配置，这个配置表示解析器的优先级别。
    我们将FreeMarkerViewResolver的级别设为0,将InternalResourceViewResolver的级别设为1。
    这样，解析器就会优先使用 FreeMarkerViewResolver 进行解析，如果找不到相应的模板，就使用InternalResourceViewResolver进行解析，如果还找不到页面，就会产生一个404错误！
    ！-->

    <!--上传图片解析器-->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="maxUploadSize">
            <!-- 10M -->
            <value>10485760</value>
        </property>
        <property name="maxInMemorySize" value="4096"/>
    </bean>

    <!--静态资源放行，凡是页面上访问css js images这些静态文件时候，都不经过controller-->
    <!--url路径如下：http://localhost:81/manager/static/ab/b/c/hello.css-->
    <!--静态资源放行：http://localhost:81/manager/css/hello.css本来是要经过contrller,但是配置了这句话，配置完了以后，直接去寻找webapp/css/hello.css-->
    <mvc:resources mapping="/static/**" location="/static/"/>
    <mvc:resources mapping="/js/**" location="/js/"/>

    <!--配置拦截器-->
    <!--<mvc:interceptors>
        <mvc:interceptor>
            &lt;!&ndash;拦截所有路径&ndash;&gt;
            <mvc:mapping path="/**" />
            &lt;!&ndash;不拦截的路径&ndash;&gt;
            <mvc:exclude-mapping path="/static/**" />
            <mvc:exclude-mapping path="/log/index*" />
            <mvc:exclude-mapping path="/log/login" />
            &lt;!&ndash;注入拦截器&ndash;&gt;
            <bean class="com.qf.manager.web.LoginFilterController" />
        </mvc:interceptor>
    </mvc:interceptors>-->


</beans>